/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.data.engine.model.impl;

import com.liferay.data.engine.model.DEDataRecordQuery;
import com.liferay.data.engine.model.DEDataRecordQueryModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the DEDataRecordQuery service. Represents a row in the &quot;DEDataRecordQuery&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>DEDataRecordQueryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DEDataRecordQueryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DEDataRecordQueryImpl
 * @generated
 */
@ProviderType
public class DEDataRecordQueryModelImpl
	extends BaseModelImpl<DEDataRecordQuery> implements DEDataRecordQueryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a de data record query model instance should use the <code>DEDataRecordQuery</code> interface instead.
	 */
	public static final String TABLE_NAME = "DEDataRecordQuery";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"deDataRecordQueryId", Types.BIGINT},
		{"appliedFilters", Types.VARCHAR}, {"fieldNames", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deDataRecordQueryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appliedFilters", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fieldNames", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DEDataRecordQuery (uuid_ VARCHAR(75) null,deDataRecordQueryId LONG not null primary key,appliedFilters VARCHAR(75) null,fieldNames VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table DEDataRecordQuery";

	public static final String ORDER_BY_JPQL =
		" ORDER BY deDataRecordQuery.deDataRecordQueryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DEDataRecordQuery.deDataRecordQueryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long DEDATARECORDQUERYID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public DEDataRecordQueryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _deDataRecordQueryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDeDataRecordQueryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _deDataRecordQueryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DEDataRecordQuery.class;
	}

	@Override
	public String getModelClassName() {
		return DEDataRecordQuery.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DEDataRecordQuery, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DEDataRecordQuery, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DEDataRecordQuery, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DEDataRecordQuery)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DEDataRecordQuery, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DEDataRecordQuery, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DEDataRecordQuery)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DEDataRecordQuery, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DEDataRecordQuery, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DEDataRecordQuery>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DEDataRecordQuery.class.getClassLoader(), DEDataRecordQuery.class,
			ModelWrapper.class);

		try {
			Constructor<DEDataRecordQuery> constructor =
				(Constructor<DEDataRecordQuery>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<DEDataRecordQuery, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DEDataRecordQuery, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DEDataRecordQuery, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DEDataRecordQuery, Object>>();
		Map<String, BiConsumer<DEDataRecordQuery, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DEDataRecordQuery, ?>>();

		attributeGetterFunctions.put("uuid", DEDataRecordQuery::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<DEDataRecordQuery, String>)DEDataRecordQuery::setUuid);
		attributeGetterFunctions.put(
			"deDataRecordQueryId", DEDataRecordQuery::getDeDataRecordQueryId);
		attributeSetterBiConsumers.put(
			"deDataRecordQueryId",
			(BiConsumer<DEDataRecordQuery, Long>)
				DEDataRecordQuery::setDeDataRecordQueryId);
		attributeGetterFunctions.put(
			"appliedFilters", DEDataRecordQuery::getAppliedFilters);
		attributeSetterBiConsumers.put(
			"appliedFilters",
			(BiConsumer<DEDataRecordQuery, String>)
				DEDataRecordQuery::setAppliedFilters);
		attributeGetterFunctions.put(
			"fieldNames", DEDataRecordQuery::getFieldNames);
		attributeSetterBiConsumers.put(
			"fieldNames",
			(BiConsumer<DEDataRecordQuery, String>)
				DEDataRecordQuery::setFieldNames);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDeDataRecordQueryId() {
		return _deDataRecordQueryId;
	}

	@Override
	public void setDeDataRecordQueryId(long deDataRecordQueryId) {
		_deDataRecordQueryId = deDataRecordQueryId;
	}

	@Override
	public String getAppliedFilters() {
		if (_appliedFilters == null) {
			return "";
		}
		else {
			return _appliedFilters;
		}
	}

	@Override
	public void setAppliedFilters(String appliedFilters) {
		_appliedFilters = appliedFilters;
	}

	@Override
	public String getFieldNames() {
		if (_fieldNames == null) {
			return "";
		}
		else {
			return _fieldNames;
		}
	}

	@Override
	public void setFieldNames(String fieldNames) {
		_fieldNames = fieldNames;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DEDataRecordQuery.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DEDataRecordQuery toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DEDataRecordQuery>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DEDataRecordQueryImpl deDataRecordQueryImpl =
			new DEDataRecordQueryImpl();

		deDataRecordQueryImpl.setUuid(getUuid());
		deDataRecordQueryImpl.setDeDataRecordQueryId(getDeDataRecordQueryId());
		deDataRecordQueryImpl.setAppliedFilters(getAppliedFilters());
		deDataRecordQueryImpl.setFieldNames(getFieldNames());

		deDataRecordQueryImpl.resetOriginalValues();

		return deDataRecordQueryImpl;
	}

	@Override
	public int compareTo(DEDataRecordQuery deDataRecordQuery) {
		long primaryKey = deDataRecordQuery.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DEDataRecordQuery)) {
			return false;
		}

		DEDataRecordQuery deDataRecordQuery = (DEDataRecordQuery)obj;

		long primaryKey = deDataRecordQuery.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		DEDataRecordQueryModelImpl deDataRecordQueryModelImpl = this;

		deDataRecordQueryModelImpl._originalUuid =
			deDataRecordQueryModelImpl._uuid;

		deDataRecordQueryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DEDataRecordQuery> toCacheModel() {
		DEDataRecordQueryCacheModel deDataRecordQueryCacheModel =
			new DEDataRecordQueryCacheModel();

		deDataRecordQueryCacheModel.uuid = getUuid();

		String uuid = deDataRecordQueryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			deDataRecordQueryCacheModel.uuid = null;
		}

		deDataRecordQueryCacheModel.deDataRecordQueryId =
			getDeDataRecordQueryId();

		deDataRecordQueryCacheModel.appliedFilters = getAppliedFilters();

		String appliedFilters = deDataRecordQueryCacheModel.appliedFilters;

		if ((appliedFilters != null) && (appliedFilters.length() == 0)) {
			deDataRecordQueryCacheModel.appliedFilters = null;
		}

		deDataRecordQueryCacheModel.fieldNames = getFieldNames();

		String fieldNames = deDataRecordQueryCacheModel.fieldNames;

		if ((fieldNames != null) && (fieldNames.length() == 0)) {
			deDataRecordQueryCacheModel.fieldNames = null;
		}

		return deDataRecordQueryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DEDataRecordQuery, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DEDataRecordQuery, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DEDataRecordQuery, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DEDataRecordQuery)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DEDataRecordQuery, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DEDataRecordQuery, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DEDataRecordQuery, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DEDataRecordQuery)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DEDataRecordQuery>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _deDataRecordQueryId;
	private String _appliedFilters;
	private String _fieldNames;
	private long _columnBitmask;
	private DEDataRecordQuery _escapedModel;

}