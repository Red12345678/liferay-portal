@component-name = "support-qa"
definition {

	property deploy.latest.marketplace.app.disabled = "true";
	property portal.fixpack.release = "true";
	property test.ignore.tomcat.ext.environment = "true";
	property testray.main.component.name = "Patching Tool";
	var testBuildFixPackZipURL = PropsUtil.get("test.build.fix.pack.zip.url");
	var testBuildFixPackZipURLPrevious = PropsUtil.get("test.build.fix.pack.zip.url.previous");

	setUp {
		SignIn.signInTestSetup();
	}

	@description = "Ensures that a fix pack can be reverted."
	@priority = "5"
	test RevertFixPack {
		property skip.install-patch = "true";
		property test.name.skip.portal.instance = "PatchingTool#RevertFixPack";

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		SignOut.signOut();

		Portlet.shutdownServer();

		PatchingTool.installPatch(patchFileZipURL = "${testBuildFixPackZipURL}");

		Portlet.startServer(
			deleteLiferayHome = "true",
			keepCachedAppServerData = "true");

		SignIn.signIn();

		SignOut.signOut();

		Portlet.shutdownServer();

		PatchingTool.uninstallPatches();

		PatchingTool.installPatch(patchFileZipURL = "${testBuildFixPackZipURLPrevious}");

		Portlet.startServer(
			deleteLiferayHome = "true",
			keepCachedAppServerData = "true");

		SignIn.signIn();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "system:check");

		for (var outputContent : list "Declarative Service Soft Circular Dependency Checker check result: No issues were found,Declarative Service Unsatisfied Component Checker check result: No issues were found,Spring Extender Unavailable Component Checker check result: No issues were found") {
			GogoShell.viewOutput(outputContent = "${outputContent}");
		}
	}

}